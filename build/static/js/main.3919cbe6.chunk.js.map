{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","name","age","email","detas","setDetas","Form","props","onSubmit","e","preventDefault","addDetas","slice","target","value","push","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","msg","catch","err","errer","type","placeholder","maxlength","List","onClick","deta","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4KAuZeA,EArZH,WAAO,IAAD,EACUC,IAAMC,SAAS,CAEvC,CACEC,KAAK,QAASC,IAAI,KAAMC,MAAM,iBAEhC,CACEF,KAAK,MAAOC,IAAI,KAAMC,MAAM,yBAPhB,mBACTC,EADS,KACFC,EADE,KAaVC,EAAO,SAACC,GAyDZ,OACE,oCACE,0BAAMC,SA1DW,SAACC,GAEpBA,EAAEC,iBAEF,IAAMC,EAAWJ,EAAMH,MAAMQ,QAErBX,EAAOQ,EAAEI,OAAOZ,KAAKa,MACrBZ,EAAMO,EAAEI,OAAOX,IAAIY,MACnBX,EAAQM,EAAEI,OAAOV,MAAMW,MAG7BH,EAASI,KAAK,CACZd,KAAMA,EACNC,IAAKA,EACLC,MAAOA,IASTa,QAAQC,IAAIN,GAGZJ,EAAMF,SAASM,GAIfO,MAAM,aAAc,CAClBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAU,CAMnBtB,KAAMQ,EAAEI,OAAOZ,KAAKa,MACpBZ,IAAKO,EAAEI,OAAOX,IAAIY,MAClBX,MAAOM,EAAEI,OAAOV,MAAMW,UAEvBU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJT,QAAQC,IAAIQ,EAAIE,QACfC,OAAM,SAAAC,GAAG,OAAIb,QAAQc,MAAMD,MAEhCb,QAAQC,IAAIC,MAAMG,QAQlB,kBACO,2BAAOU,KAAK,OAAO9B,KAAK,OAAO+B,YAAY,yCADlD,IAC6D,6BAD7D,kBAEO,2BAAOD,KAAK,MAAM9B,KAAK,MAAMgC,UAAU,IAAID,YAAY,mCAF9D,IAEwE,6BAFxE,uBAGO,2BAAOD,KAAK,QAAQ9B,KAAK,QAAQ+B,YAAY,qDAHpD,IAGsE,6BAEpE,4BAAQD,KAAK,UAAb,mBAMFG,EAAO,SAAC3B,KA2Sd,OACE,iCAGE,kBAACD,EAAD,CAAMF,MAAOA,EAAOC,SAAUA,IAI9B,kBAAC6B,EAAD,CAAM9B,MAAOA,EAAOC,SAAUA,IAG9B,4BAAQ8B,QA/EM,WAMhBjB,MAAM,aAAc,CAClBC,OAAQ,MACRC,QAAS,CACP,eAAe,qCAIlBI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAEJT,QAAQC,IAAIQ,EAAIE,KAChBtB,EAASoB,EAAIW,SAEdR,OAAM,SAAAC,GAAG,OAAEb,QAAQqB,MAAMR,QA4DxB,OAEA,4BAAQM,QAxDS,WAEjBjB,MAAM,aAAc,CAClBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAGlBC,KAAMC,KAAKC,UAAU,CACnBtB,KAAM,YAEPuB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAChBF,MAAK,SAAAC,GACJT,QAAQC,IAAIQ,EAAIE,QACfC,OAAM,SAAAC,GAAG,OAAEb,QAAQqB,MAAMR,QA0C5B,UCjYcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAS,GACLrB,QAAQqB,MAAMA,EAAMgB,a","file":"static/js/main.3919cbe6.chunk.js","sourcesContent":["import React from 'react';\n\nconst App = () => {\n  const [detas, setDetas] = React.useState([\n    // detaのidなし(データベース上に)\n    {\n      name:'satou', age:'25', email:'sat@gmail.com'\n    },\n    {\n      name:'abe', age:'48', email:'hiroshi@yahoo.co.jp'\n    },\n  ])\n\n\n  // Formコンポーネント\n  const Form = (props) => {\n    const handleSubmit = (e) => {\n      // デフォルトでurlがリロードされることを防ぐ\n      e.preventDefault()\n      // ステートをコピーしている。\n      const addDetas = props.detas.slice()\n        // 追加するユーザーの値を取得する。\n        const name = e.target.name.value\n        const age = e.target.age.value\n        const email = e.target.email.value\n        // addDetasに追加するユーザーの値を取得する。←恐らくここでうまくいっていいない。意図した処理と実際の処理に違いを見つける。\n        // 実施の処理を明確化する。\n        addDetas.push({\n          name: name,\n          age: age,\n          email: email\n        })\n        // addDetas.push(name)\n        // addDetas.push(age)\n        // addDetas.push(ad)\n        // addDetas.push(detas)\n\n        // 実際の処理を見るために、consoloe.log()を使って行われた処理を確認するとよい。\n        //  デバックにはconsole.logを使う\n        console.log(addDetas)\n\n        // ステートを更新する。（setDetas）\n        props.setDetas(addDetas)\n\n\n      // ---------form 追加ボタン押した時データ送信----------\n        fetch(\"/api/users\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json; cherset=utf-8\",\n          },\n          body: JSON.stringify({    //json形式＝オブジェクトっぽく書く？\n            // name: addDetas.name,\n            // age: addDetas.age,\n            // email: addDetas.email\n\n            // name: Form.setDetas\n            name: e.target.name.value,\n            age: e.target.age.value,\n            email: e.target.email.value\n          })\n        }).then(res => res.json())\n          .then(res => {\n            console.log(res.msg)\n          }).catch(err => console.errer(err))\n\n        console.log(fetch.body)\n      \n\n\n\n    }\n    return (\n      <>\n        <form onSubmit={handleSubmit}>\n          名前 : <input type=\"text\" name=\"name\" placeholder=\"お名前を入力\"/> <br />\n          年齢 : <input type=\"tel\" name=\"age\" maxlength=\"2\" placeholder=\"年齢を入力\"/> <br />\n          メール: <input type=\"email\" name=\"email\" placeholder=\"e-mailアドレスを入力\"/> <br />\n          {/* <button type=\"submit\" onClick={handleAdd}>追加</button> */}\n          <button type=\"submit\">追加</button>\n        </form>\n      </>\n    )\n  }\n\n  const List = (props) => {\n    \n    // const userDeta = () => {\n    // }\n\n    // ＋ボタンが押された時以下の処理を実行\n      // const incBtn = () => { \n      //   // 1.props.detas[index].ageの数を取得\n      //   const newAge = props.detas[index].age.value\n      //   // 2.取得した値に＋１する。\n      //   newAge ++\n      // }\n\n    // カウントボタン\n    // 1.年齢のvalueを取得 <- 値の取得がうまくいっていない\n    // 2.+1する\n    \n      // const incBtn = (props) => { \n      //   const newAge = props.detas[this.index].age.slice()\n      //   props.setDetas(newAge++)\n      // }\n\n\n      // const incBtnにpropsは渡せない。（コンポーネント関数ではないから。）\n      // const incBtn = (props) => { \n      //   const incAge = props.detas[this.index].age.value\n      //   props.setDetas(incAge++)\n      // }\n\n\n      // ----------- 0602-------------\n      // // reactでのクリックイベントの渡し方 ----- onClick = { 関数名 }\n      // const incBtn = () => {\n      //   // 1. 年齢を取得\n      //   // const newAge = props.detas.age.value\n      //   // const newAge = detas.age.value\n      //   // const newAge = detas[this.index].age.value\n      //   // 2. +1 する\n      //   // newAge ++\n\n      //   // ---------06-04\n      //   // this.setState({value : this.state.value - 1});\n\n      //   // this.setDeta({value : this.deta.age.value - 1});\n\n      //   const newAge = this.deta.age.value\n      //   newAge++\n      // }\n\n      // const [count , setCount] = useState(0);\n    \n\n      // const decBtn = (props) => { \n      //   // const newAge = props.detas[this.index].age.slice()\n      //   // props.setDetas(newAge++)\n      //   // this.setDetas({count :this.detas.count -1})\n      //   // props.setDetas({ value: props.detas[this.index].age - 1})\n      //   const newAge = props.detas[this.index].age.value\n      //   props.setDetas(newAge - 1)\n      //   console.log( '-1')\n      // }\n\n\n    return (\n      // return内はconst書けない\n      <>\n\n        {/* <ul><li></li></ul>をコピーする。\n        .slice()を使う。\n        切り返し処理＝ for? */}\n        {/* map = 新しい配列を生成 */}\n        {/* detas にindex番号を入れる */}\n        {/* 要素のindex番号を取得 */}\n        {/* index -> +1 */}\n\n        {/* ＋ボタンが押された時以下の処理を実行\n            const incBtn = () => { \n              // 1.props.detas[index].ageの数を取得\n              const newAge = props.detas[index].age.value\n              // 2.（クリックしたら）取得した値に＋１する。\n              newAge ++\n        } */}\n\n        \n        {/* <ul>をあるだけ表示。detasにはindex番号を反映。 */}\n\n        {\n          // mapメソッド\n          // 既存の配列.map(処理) => 既存の配列に処理をして返してくれる。\n          // ？？.map((deta, index)？？\n\n          // 配列.map((value, index) => {}) valueが配列の要素で、indexがindex番号\n          // mapは配列の要素をひとつひとつ取り出して処理を行う関数。\n          // ひとつ要素を取り出して処理を行う際の「該当する要素」が第一引数で、「該当するindex番号」が第二引数。\n          // props.detas.map()の例だと、↓が配列。この場合、配列の要素が２つある。処理が行われる回数が2回。\n        // [\n        //   {\n        //     name: 'satou', age: '25', email: 'sat@gmail.com'\n        //   },\n        //   {\n        //     name: 'abe', age: '48', email: 'hiroshi@yahoo.co.jp'\n        //   },\n        // ]\n\n          props.detas.map((deta, index) => {\n            // detaをindex(ここでは[0]と[1])分、新しい配列にして生成。-----という意味？\n            \n            // const incBtn = (detas) => {\n            //   // const newAge = parseInt(deta.age) + 1\n            //   const newAge = parseInt(deta.age)\n            //   // console.log(newAge + 1)\n            //   // return newAge + 1\n            //   console.log(newAge+1)\n            //   // newAge.value = newAge + 1\n            // }\n\n            // const incBtn = (detas) => {  //\n            //   // let newAge = parseInt(deta.age)  //同じ値のままになってる\n            //   const countUp = () => {\n            //     // newAge++\n            //     deta.age++\n            //     console.log(deta.age)\n            //   }\n            //   countUp()\n            //   // console.log(newAge + 1)\n            //   props.setDetas([detas.age])\n\n            //   // 1.データ(deats)をコピー  <-detasのアクセスに注意。propsを使うかどうか（コンポーネントがappと同じなのか）\n            //   // 2.該当するageのみ変更（++） <- detasを使用するので、該当するindex番号が必要。index番号を使うのに楽なのは、mapの内部。\n            //   // 3.データ(detas)を更新 <- setDetasのアクセスに注意。detasと同じアクセスの仕方にする。\n            // }\n\n\n            // const decBtn = () => {\n              // const newAge = detas.age\n              // console.log(newAge)  //undefined\n              // console.log(newAge - 1)  //NaN\n            // }\n            \n            const handleDelete = () => {\n              console.log(deta._id)\n              fetch(\"/api/users\", {\n                method: \"DELETE\",\n                headers: {\n                  \"Content-Type\": \"application/json; cherset=utf-8\",\n                },\n                // deta: {\n                //   id: 9999,\n                // },\n                body: JSON.stringify({\n                  id: deta._id\n                })\n\n              })\n                .then(res => res.json())\n                .then(res => {\n                  console.log(res.msg)\n                })\n                .catch(err => console.error(err))\n            }\n\n            \n            return (\n              <>\n              <ul>\n                <li>名前 : {props.detas[index].name}</li>\n                <li>年齢 : {props.detas[index].age}</li>\n                {/* <li>年齢 : {props.detas[index].age.value}</li> */}\n                {/* <li>年齢 : {props.detas[index].age.value + 1}</li> */}\n\n                {/* {props.detas[index].age}の数を取得→1ずつ減らす、増やす処理（関数）。 */}\n\n                <button onClick={ () => {\n                    const newDetas = props.detas.slice()\n                    newDetas[index].age--\n                    props.setDetas(newDetas)\n                }}> - </button>\n                \n                <button onClick={ () => {\n\n                  // 1.データ(deats)をコピー  <-detasのアクセスに注意。propsを使うかどうか（コンポーネントがappと同じなのか）\n                  const newDetas = props.detas.slice()\n                  // 2.該当するageのみ変更（++） <- detasを使用するので、該当するindex番号が必要。index番号を使うのに楽なのは、mapの内部。\n                  newDetas[index].age++\n                  // 3.データ(detas)を更新 <- setDetasのアクセスに注意。detasと同じアクセスの仕方にする。\n                  props.setDetas(newDetas)\n                }\n                }> + </button>\n\n                <li>メール : {props.detas[index].email}</li>\n              </ul>\n\n                {/* HTTPメソッド delete*/}\n                <button onClick={handleDelete}>DELETE</button>\n              <hr />\n              </>\n            )\n          })\n        }\n\n      </>\n    )\n  }\n\n\n  // // ---------form 追加ボタン押した時データ送信----------\n  // const handleAdd = () => {\n  //   fetch(\"/api/users\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json; cherset=utf-8\",\n  //     },\n  //     body: JSON.stringify({    //json形式＝オブジェクトっぽく書く？\n  //       // name: addDetas.name,\n  //       // age: addDetas.age,\n  //       // email: addDetas.email\n\n  //       // name: Form.setDetas\n  //       name: Form.addDetas  // undefinedのデータを受け取りました\n  //     })\n  //   }).then(res => res.json())\n  //     .then(res => {\n  //       console.log(res.msg)\n  //     }).catch(err => console.errer(err))\n\n  //   console.log(fetch.body)\n  // }\n\n\n  // --------------------------------------\n  // GETボタンを押した時にサーバーと通信する関数。msgをserverからクライアントに送った。\n  const handleGet = () => {\n    // サーバーとの通信は非同期処理で行うため、fetch(もしくはaxios)を使う。\n    // fetch(url, リクエストの内容)  fetchは「取りに行く」という意味。\n    // .then(レスポンス=>{レスポンスを用いた処理})  fetchが成功するとthen,\n    // .catch(エラー=>{エラーを用いた処理})  fetchが失敗するとcatchが呼び出される\n    // fetch(\"/api/users\")\n    fetch(\"/api/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\":\"application/json; cherset=utf-8\",\n      }\n    })\n    // ↓レスポンスがjson形式なので、json形式を解読する。\n    .then(res => res.json()) // res=>res.json()は、(res)=>{return res.json()}の省略記法。\n    .then(res=>{\n      // レスポンスが連想配列の形なので、こちらに処理を記述する。\n      console.log(res.msg) //msgはkey\n      setDetas(res.deta)\n    })\n    .catch(err=>console.error(err))\n  }\n\n\n    // データの送信\n    // データのクライアント側からサーバー側に送る処理\n    const handlePost = () => {\n      // 同じようにfetchを使う。\n      fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json; cherset=utf-8\",\n        },\n        // データを送る際にはリクエストのボディを使う。json形式で送る。\n        body: JSON.stringify({\n          name: \"inoue\"\n        })\n      }).then(res=>res.json())\n      .then(res=> {\n        console.log(res.msg)\n      }).catch(err=>console.error(err))\n    }\n\n    // データ削除（DELETE）\n    // const handleDelete = () => {\n    //   // console.log(props.detas.index)\n    //   fetch(\"/api/users\", {\n    //     method: \"DELETE\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json; cherset=utf-8\",\n    //     },\n    //     // deta: {\n    //     //   id: 9999,\n    //     // },\n    //     body: JSON.stringify({\n    //       // id: props.detas.index\n    //     })\n\n    //   })\n    //   .then(res => res.json())\n    //   .then(res => {\n    //     console.log(res.msg) \n    //   })\n    //   .catch(err => console.error(err))\n    // }\n\n\n\n\n  return (\n    <section>\n      {/* データ入力フォーム */}\n      {/* <Form></Form> */}\n      <Form detas={detas} setDetas={setDetas}></Form>\n\n      {/* 入力されたデータを反映 */}\n      {/* <List></List> */}\n      <List detas={detas} setDetas={setDetas}></List>\n      {/* <List detas={detas} index={index} setDetas={setDetas}></List> */}\n      {/* HTTPメソットの読み取り＝GET */}\n      <button onClick={handleGet}>GET</button>\n      {/* HTTPメソッド */}\n      <button onClick={handlePost}>POST</button>\n\n      {/* HTTPメソッド delete\n      <button onClick={handleDelete}>DELETE</button> */}\n\n    </section>\n  );\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}